MY COMMENTS LIKE THIS -- CR
# This is an example of hierarchy, ordering, inputs/outputs, and alternative recipe

    # 21-Oct-2013 2:00:23 PM - TaskEngine 1.4.8 / Disco 1.6.10
    Welcome to Disco! (Type 'help' for command list)
  > cd ..\..\GitHub\HTNLfD\learn\test
    D:\GitHub\HTNLfD\learn\test
  > source HierarchicalDemonstration.txt
  > cd ..\models
  > load SetTableDemonstration.xml
  > 
  > 
# Start of first demonstration (PlaceDishes)
  > task Demonstration
    User says "Let's achieve Demonstration."
    Agent says "Ok."
  > task Place / PhysObj.SquareTable / PhysObj.DinnerPlate
    User says "Please execute Place on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:0 Y:0 Z:0."

BTW, USING {...} IN A FORMAT STRING FOR PLACE YOU COULD PRINT OUT SOMETHING NICE AND COMPACT LIKE:

   Move DinnerPlate from [0,0,0] to [1,2,3] wrt SquareTable.

HERE'S THE FORMAT STRING TO ADD TO THE SETTABLEDEMONSTRATION.PROPERTIES (ASSUMING YOU MADE OTHER CHANGES TO TOSTRING METHODS):

Place@format = move %2$s{$this.object == null ? "" : " from "+$this.object.location} {$this.newObject == null ? "" : " to "+$this.newObject.location} wrt %1$s.

DON'T UNDERESTIMATE THE IMPORTANCE OF SUCCINT NOTATION (EVERY MATHEMATICIAN KNOWS THIS :-)

(NOTE SMALL BUG WITH EXTRA SPACE, BUT IF I PUT BRACKETS TOUCHING, DISCO DOESN'T RECOGNIZE THEM---WILL FIX IN FUTURE UPDATE)

    Agent execute Place on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 producing DinnerPlate Location: X:10 Y:10 Z:10.
    Agent says "Ok."
  > task Place / PhysObj.DinnerPlate / PhysObj.SaladPlate
    User says "Please execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:0 Y:0 Z:1."
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 producing SaladPlate Location: X:10 Y:10 Z:11.
    Agent says "Ok."
  > task Place / PhysObj.DinnerPlate / PhysObj.SoupBowl
    User says "Please execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SoupBowl Location: X:0 Y:0 Z:2."
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SoupBowl Location: X:10 Y:10 Z:12 producing SoupBowl Location: X:10 Y:10 Z:12.
    Agent says "Ok."
  > done Demonstration
    User says "Achieve Demonstration is done."
    Agent says "Ok."
  > eval Packages.edu.wpi.htnlfd.Init.learn($disco,"PlaceDishes")
    # Returned 'null'
  > print PlaceDishes
	### We have two referece frame objects.
	
SO THIS EXAMPLE IS MOSTLY ABOUT INPUTS?  AND ORDERING?  SAY SO IN INTRODUCTION ABOVE.
# As we can see place2 step requires place1 step since place2 is after place1 in demonstration and place1 has the same input and output
# as place2's input.

<task id="PlaceDishes" xmlns="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">
    <input name="place1_referenceFrame" type="PhysObj"/>
    <input name="place1_object" type="PhysObj" modified="place1_newObject"/>
    <input name="place2_referenceFrame" type="PhysObj"/>

# Since reference frame objects of place2 and place3 are the same, we just have one input here.

    <input modified="place2_newObject" name="place2_object" type="PhysObj"/>
    <input modified="place3_newObject" name="place3_object" type="PhysObj"/>
    <output name="place1_newObject" type="PhysObj"/>
    <output name="place2_newObject" type="PhysObj"/>
    <output name="place3_newObject" type="PhysObj"/>
    <subtasks id="placeDishes1" ordered="false">
      <step name="place1" task="std:Place"/>
      <step name="place2" requires="place1" task="std:Place"/>
      <step name="place3" requires="place1" task="std:Place"/>
# Since place1 has an modified input that has DinnerPlate and place has an input of DinnerPlate so place2 needs place1 and they should be odered.

      <binding slot="$place3.referenceFrame" value="$this.place2_referenceFrame"/>

GREAT. BECAUSE WAS DINNERPLATE IN BOTH.

      <binding slot="$this.place1_referenceFrame" value="PhysObj.SquareTable"/>
      <binding slot="$this.place3_object" value="PhysObj.SoupBowl"/>
      <binding slot="$place2.object" value="$this.place2_object"/>
      <binding slot="$this.place1_object" value="PhysObj.DinnerPlate"/>
      <binding slot="$place1.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$this.place2_object" value="PhysObj.SaladPlate"/>
      <binding slot="$this.place3_newObject" value="$place3.newObject"/>
      <binding slot="$this.place1_newObject" value="$place1.newObject"/>
      <binding slot="$place1.object" value="$this.place1_object"/>
      <binding slot="$this.place2_referenceFrame" value="PhysObj.DinnerPlate"/>
      <binding slot="$place2.referenceFrame" value="$this.place2_referenceFrame"/>
      <binding slot="$place3.object" value="$this.place3_object"/>
      <binding slot="$this.place2_newObject" value="$place2.newObject"/>
# These bindings are "raising" inputs and outputs.
MOST OF REST OF THESE BINDINGS ABOVE ARE "RAISING" INPUTS AND OUTPUTS. GOOD.

    </subtasks>
  </task>

    Agent says "Ok."
  > 
  ### Start of second demonstration (PlaceSilverware)
  > task Demonstration
    User says "Let's achieve Demonstration."
    Agent says "Ok."
  > task Place / PhysObj.DinnerPlate / PhysObj.Spoon 
    User says "Please execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Spoon Location: X:1 Y:0 Z:0."
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Spoon Location: X:11 Y:10 Z:10 producing Spoon Location: X:11 Y:10 Z:10.
    Agent says "Ok."
  > task Place / PhysObj.DinnerPlate / PhysObj.Fork
    User says "Please execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Fork Location: X:-1 Y:0 Z:0."
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 producing Fork Location: X:9 Y:10 Z:10.
    Agent says "Ok."
  > task Place / PhysObj.DinnerPlate / PhysObj.Knife
    User says "Please execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Knife Location: X:2 Y:0 Z:0."
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10 producing Knife Location: X:12 Y:10 Z:10.
    Agent says "Ok."
  > done Demonstration
    User says "Achieve Demonstration is done."
    Agent says "Ok."
  > eval Packages.edu.wpi.htnlfd.Init.learn($disco,"PlaceSilverware")
WARNING: redefining task model urn:disco.wpi.edu:htnlfd:setTable1
# Warnings should be eliminated

    # Returned 'null'
  > print PlaceSilverware
	### It doesn't have any ordering constraints. 
	### There are bindings to constants in it's subtask. After adding it's parent these constant bindings are removed.
<task id="PlaceSilverware" xmlns="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">
    <input name="place1_referenceFrame" type="PhysObj"/>
    <input modified="place1_newObject" name="place1_object" type="PhysObj"/>
    <input modified="place2_newObject" name="place2_object" type="PhysObj"/>
    <input modified="place3_newObject" name="place3_object" type="PhysObj"/>
    <output name="place1_newObject" type="PhysObj"/>
    <output name="place2_newObject" type="PhysObj"/>
    <output name="place3_newObject" type="PhysObj"/>
    <subtasks id="placeSilverware1">
      <step name="place1" task="std:Place"/>
      <step name="place2" task="std:Place"/>
      <step name="place3" task="std:Place"/>

# These steps are not ordered since they don't have flow of inputs and outputs

      <binding slot="$this.place1_object" value="PhysObj.Spoon"/>
      <binding slot="$place3.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$place1.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$this.place3_newObject" value="$place3.newObject"/>
      <binding slot="$this.place2_object" value="PhysObj.Fork"/>
      <binding slot="$place1.object" value="$this.place1_object"/>
      <binding slot="$this.place1_newObject" value="$place1.newObject"/>
      <binding slot="$this.place1_referenceFrame" value="PhysObj.DinnerPlate"/>
      <binding slot="$place2.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$place3.object" value="$this.place3_object"/>
      <binding slot="$this.place2_newObject" value="$place2.newObject"/>
      <binding slot="$this.place3_object" value="PhysObj.Knife"/>
      <binding slot="$place2.object" value="$this.place2_object"/>

# Same reference frame and raising logic as before

    </subtasks>
  </task>

    Agent says "Ok."
  > 
  ### Start of third demonstration (PlaceGlasses)
  > task Demonstration
    User says "Let's achieve Demonstration."
    Agent says "Ok."
  > task Place / PhysObj.DinnerPlate / PhysObj.WaterGlass
    User says "Please execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and WaterGlass Location: X:-1 Y:1 Z:0."
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and WaterGlass Location: X:9 Y:11 Z:10 producing WaterGlass Location: X:9 Y:11 Z:10.
    Agent says "Ok."
  > done Demonstration
    User says "Achieve Demonstration is done."
    Agent says "Ok."
  > eval Packages.edu.wpi.htnlfd.Init.learn($disco,"PlaceGlasses")
WARNING: redefining task model urn:disco.wpi.edu:htnlfd:setTable1
    # Returned 'null'
  > print PlaceGlasses

<task id="PlaceGlasses" xmlns="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">
    <input name="place1_referenceFrame" type="PhysObj"/>
    <input modified="place1_newObject" name="place1_object" type="PhysObj"/>
    <output name="place1_newObject" type="PhysObj"/>
    <subtasks id="placeGlasses1">
      <step name="place1" task="std:Place"/>
      <binding slot="$this.place1_object" value="PhysObj.WaterGlass"/>
      <binding slot="$place1.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$place1.object" value="$this.place1_object"/>
      <binding slot="$this.place1_newObject" value="$place1.newObject"/>
      <binding slot="$this.place1_referenceFrame" value="PhysObj.DinnerPlate"/>
    </subtasks>
  </task>

    Agent says "Ok."
  > 
  ### Start of demonstration (SetTable)
  > task Demonstration
    User says "Let's achieve Demonstration."
    Agent says "Ok."
  > task PlaceDishes
    User says "Let's achieve PlaceDishes on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12."
    Agent execute Place on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:20 Y:20 Z:20 producing DinnerPlate Location: X:20 Y:20 Z:20.
    Agent execute Place on DinnerPlate Location: X:20 Y:20 Z:20 and SaladPlate Location: X:30 Y:30 Z:31 producing SaladPlate Location: X:30 Y:30 Z:31.
    Agent execute Place on DinnerPlate Location: X:20 Y:20 Z:20 and SoupBowl Location: X:30 Y:30 Z:32 producing SoupBowl Location: X:30 Y:30 Z:32.
    Agent says "Ok."
  > task PlaceSilverware
    User says "Let's achieve PlaceSilverware on DinnerPlate Location: X:20 Y:20 Z:20 and Spoon Location: X:11 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10."
    Agent execute Place on DinnerPlate Location: X:20 Y:20 Z:20 and Spoon Location: X:31 Y:30 Z:30 producing Spoon Location: X:31 Y:30 Z:30.
    Agent execute Place on DinnerPlate Location: X:20 Y:20 Z:20 and Fork Location: X:29 Y:30 Z:30 producing Fork Location: X:29 Y:30 Z:30.
    Agent execute Place on DinnerPlate Location: X:20 Y:20 Z:20 and Knife Location: X:32 Y:30 Z:30 producing Knife Location: X:32 Y:30 Z:30.
    Agent says "Ok."
  > task PlaceGlasses
    User says "Let's achieve PlaceGlasses on DinnerPlate Location: X:20 Y:20 Z:20 and WaterGlass Location: X:9 Y:11 Z:10."
    Agent execute Place on DinnerPlate Location: X:20 Y:20 Z:20 and WaterGlass Location: X:29 Y:31 Z:30 producing WaterGlass Location: X:29 Y:31 Z:30.
    Agent says "Ok."
  > done Demonstration
    User says "Achieve Demonstration is done."
    Agent says "Ok."
  > eval Packages.edu.wpi.htnlfd.Init.learn($disco,"SetTable")
WARNING: redefining task model urn:disco.wpi.edu:htnlfd:setTable1
    # Returned 'null'
  > print SetTable
	### All the steps'(PlaceDishes, PlaceSilverware, PlaceGlasses) inputs and outputs are added to SetTable.
	### Ordering constraints are added to PlaceSilverware and PlaceGlasses steps.
	### Bindings to constants are added in SetTable and they are removed from their steps' bindings.

SOUNDS GOOD.  I DIDN'T VERIFY BELOW --- YOU SHOULD MAKE SURE EVERYTHING IS CORRECT BELOW :-)

<task id="SetTable" xmlns="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">
    <input name="placeDishes1_place1_referenceFrame" type="PhysObj"/>
    <input modified="placeDishes1_place1_newObject" name="placeDishes1_place1_object" type="PhysObj"/>
    <input name="placeDishes1_place2_referenceFrame" type="PhysObj"/>
    <input modified="placeDishes1_place2_newObject" name="placeDishes1_place2_object" type="PhysObj"/>
    <input modified="placeDishes1_place3_newObject" name="placeDishes1_place3_object" type="PhysObj"/>
    <input modified="placeSilverware1_place1_newObject" name="placeSilverware1_place1_object" type="PhysObj"/>
    <input modified="placeSilverware1_place2_newObject" name="placeSilverware1_place2_object" type="PhysObj"/>
    <input modified="placeSilverware1_place3_newObject" name="placeSilverware1_place3_object" type="PhysObj"/>
    <input modified="placeGlasses1_place1_newObject" name="placeGlasses1_place1_object" type="PhysObj"/>
    <output name="placeDishes1_place1_newObject" type="PhysObj"/>
    <output name="placeDishes1_place2_newObject" type="PhysObj"/>
    <output name="placeDishes1_place3_newObject" type="PhysObj"/>
    <output name="placeSilverware1_place1_newObject" type="PhysObj"/>
    <output name="placeSilverware1_place2_newObject" type="PhysObj"/>
    <output name="placeSilverware1_place3_newObject" type="PhysObj"/>
    <output name="placeGlasses1_place1_newObject" type="PhysObj"/>
    <subtasks id="setTable1" ordered="false">
      <step name="placeDishes1" task="PlaceDishes"/>
      <step name="placeSilverware1" requires="placeDishes1" task="PlaceSilverware"/>
      <step name="placeGlasses1" requires="placeDishes1" task="PlaceGlasses"/>
# We have the same thing here, since placeDishes1 has a modified input and placeSilverware1 has an input, they should be ordered.

      <binding slot="$this.placeDishes1_place3_object" value="PhysObj.SoupBowl"/>
      <binding slot="$placeSilverware1.place1_referenceFrame" value="$this.placeDishes1_place2_referenceFrame"/>
      <binding slot="$placeDishes1.place2_object" value="$this.placeDishes1_place2_object"/>
      <binding slot="$this.placeSilverware1_place1_newObject" value="$placeSilverware1.place1_newObject"/>
      <binding slot="$this.placeDishes1_place1_referenceFrame" value="PhysObj.SquareTable"/>
      <binding slot="$placeDishes1.place3_object" value="$this.placeDishes1_place3_object"/>
      <binding slot="$placeDishes1.place1_referenceFrame" value="$this.placeDishes1_place1_referenceFrame"/>
      <binding slot="$this.placeDishes1_place1_newObject" value="$placeDishes1.place1_newObject"/>
      <binding slot="$this.placeDishes1_place2_referenceFrame" value="PhysObj.DinnerPlate"/>
# We have DinnerPlate for reference frame
      <binding slot="$this.placeDishes1_place2_object" value="PhysObj.SaladPlate"/>
      <binding slot="$placeGlasses1.place1_object" value="$this.placeGlasses1_place1_object"/>
      <binding slot="$this.placeSilverware1_place2_newObject" value="$placeSilverware1.place2_newObject"/>
      <binding slot="$placeSilverware1.place1_object" value="$this.placeSilverware1_place1_object"/>
      <binding slot="$placeSilverware1.place3_object" value="$this.placeSilverware1_place3_object"/>
      <binding slot="$placeGlasses1.place1_referenceFrame" value="$this.placeDishes1_place2_referenceFrame"/>
      <binding slot="$placeSilverware1.place2_object" value="$this.placeSilverware1_place2_object"/>
      <binding slot="$this.placeDishes1_place2_newObject" value="$placeDishes1.place2_newObject"/>
      <binding slot="$this.placeGlasses1_place1_object" value="PhysObj.WaterGlass"/>
      <binding slot="$this.placeGlasses1_place1_newObject" value="$placeGlasses1.place1_newObject"/>
      <binding slot="$this.placeDishes1_place1_object" value="PhysObj.DinnerPlate"/>
# We have DinnerPlate for object(since referenceFrame has modified but object hasn't modified)
      <binding slot="$this.placeDishes1_place3_newObject" value="$placeDishes1.place3_newObject"/>
      <binding slot="$this.placeSilverware1_place1_object" value="PhysObj.Spoon"/>
      <binding slot="$placeDishes1.place1_object" value="$this.placeDishes1_place1_object"/>
      <binding slot="$this.placeSilverware1_place2_object" value="PhysObj.Fork"/>
      <binding slot="$this.placeSilverware1_place3_newObject" value="$placeSilverware1.place3_newObject"/>
      <binding slot="$this.placeSilverware1_place3_object" value="PhysObj.Knife"/>
      <binding slot="$placeDishes1.place2_referenceFrame" value="$this.placeDishes1_place2_referenceFrame"/>
    </subtasks>
  </task>

    Agent says "Ok."
  > 
  ### Returning everything to it's first locations for another demonstration
  > task Reset
    User says "One of us should execute Reset."
    Agent execute Reset.
    Agent says "Ok."
  > 
  ### Alternative Recipe for PlaceDishes

  > task Demonstration
    User says "Let's achieve Demonstration."
    Agent says "Ok."
  > task  Place / PhysObj.SquareTable / PhysObj.DinnerPlate
    User says "Please execute Place on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:0 Y:0 Z:0."
    Agent execute Place on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 producing DinnerPlate Location: X:10 Y:10 Z:10.
    Agent says "Ok."
  > task Place / PhysObj.DinnerPlate / PhysObj.SoupBowl
    User says "Please execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SoupBowl Location: X:0 Y:0 Z:2."
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SoupBowl Location: X:10 Y:10 Z:12 producing SoupBowl Location: X:10 Y:10 Z:12.
    Agent says "Ok."
  > done Demonstration
    User says "Achieve Demonstration is done."
    Agent says "Ok."
  > eval Packages.edu.wpi.htnlfd.Init.learn($disco,"PlaceDishes");
WARNING: redefining task model urn:disco.wpi.edu:htnlfd:setTable1

HOW DOES SYSTEM KNOW/GUESS (FOR NOW) THAT THIS IS AN ALTERNATIVE RECIPE VS. A SECOND DEMONSTRATION?

    # Returned 'null'
  > print PlaceDishes
	### Alternative recipe is added. Since The inputs and outputs of the second recipe are not different, parent tasks will not change.
	### Bindings of the added recipe are binded to the existed inputs.
<task id="PlaceDishes" xmlns="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">
    <input name="place1_referenceFrame" type="PhysObj"/>
    <input modified="place1_newObject" name="place1_object" type="PhysObj"/>
    <input name="place2_referenceFrame" type="PhysObj"/>
    <input modified="place2_newObject" name="place2_object" type="PhysObj"/>
    <input modified="place3_newObject" name="place3_object" type="PhysObj"/>
    <input name="input1" type="boolean"/>

MENTION THAT ARBITRARILY DECIDING THERE IS A SEPARATE BOOLEAN INPUT TO DECIDE BETWEEN RECIPES.

ANY THOUGHTS ABOUT OTHER APPROACHES?

HOW ABOUT A "MACHINE LEARNING APPROACH" THAT KNOWS SOMETHING ABOUT "IMPORTANT FEATURES"
AND COMES UP WITH SOME HYPOTHESES (BASED ON CLUSTERING OF INPUT FEATURES)?  AND THEN AT 
LEAST ASKS THE USER A FOCUSED QUESTION?  THIS IS A MIX OF USING "BACKGROUND KNOWLEDGE" AND
"USER TELLS US" !

TO APPLY TO TRIVIAL TABLE SETTING, WHAT FEATURE MIGHT BE KNOWN AS
BACKGROUND KNOWLEDGE? NUMBER OF OBJECTS INVOLVED!!!  

IMPLEMENT SOMETHING SIMPLE BASED ON THIS IDEA?

    <output name="place1_newObject" type="PhysObj"/>
    <output name="place2_newObject" type="PhysObj"/>
    <output name="place3_newObject" type="PhysObj"/>
    <subtasks id="placeDishes1" ordered="false">
      <step name="place1" task="std:Place"/>
      <step name="place2" requires="place1" task="std:Place"/>
      <step name="place3" requires="place1" task="std:Place"/>
      <applicable>$this.input1</applicable>
      <binding slot="$place3.referenceFrame" value="$this.place2_referenceFrame"/>
      <binding slot="$place1.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$this.place3_newObject" value="$place3.newObject"/>
      <binding slot="$this.place1_newObject" value="$place1.newObject"/>
      <binding slot="$place1.object" value="$this.place1_object"/>
      <binding slot="$place2.referenceFrame" value="$this.place2_referenceFrame"/>
      <binding slot="$place3.object" value="$this.place3_object"/>
      <binding slot="$this.place2_newObject" value="$place2.newObject"/>
      <binding slot="$place2.object" value="$this.place2_object"/>
    </subtasks>
    <subtasks id="placeDishes11" ordered="false">

(I THINK I SUGGESTED THIS BEFORE) YOU NEED A BETTER NAMING SCHEME FOR DECOMP'S.  E.G., CAN YOU MAKE
THIS COME OUT PLACEDISHES2?   IT SHOULD BE EASY TO CHECK HOW MANY DECOMP'S YOU HAVE FOR A GIVEN
TASK ALREADY.

A BIG ISSUE HERE (DOCUMENT IN THIS FILE ALSO) IS DIFFERENT NUMBER OF INPUTS FOR ALT.
RECIPES.  I *FORGOT* IN OUR EARLIER CONVERSATION THAT I ADDED A @OPTIONAL PROPERTY TO DISCO
(FOR ANOTHER PROJECT) TO DECLARE THAT AN INPUT IS OPTIONAL, SO THAT IT WON'T ALWAYS
ASK FOR IT AT THE START.

SEE EXAMPLE IN DISCO/TEST/OPTIONAL3.TEST.  THE EXAMPLE DECLARTION HERE WOULD BE:

   PlaceDishes.input2@optional = true

ASSUMING I HAVE THE RIGHT INPUT.  NOTE THAT IF THIS INPUT WAS NOT PROVIDED (NULL)
AND THE RECIPE THAT NEEDED IT WAS LATER CHOSEN, THEN IT WILL BE ASKED FOR WHEN NEEDED.
(I COULD/SHOULD IMPROVE DISCO TO USE THE INFORMATION IF THE RECIPE IS CHOSEN TO
TREAT THE INPUT AS NON-OPTIONAL)

SO THIS MEANS THAT YOU NEED YOUR LEARNING PROGRAM TO ALSO MAKE A PROPERTIES OBJECT
(SEE CODE IN TASKENGINE).

      <step name="place1" task="std:Place"/>
      <step name="place2" requires="place1" task="std:Place"/>
      <applicable>!$this.input1</applicable>
      <binding slot="$place1.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$this.place3_newObject" value="$place2.newObject"/>
      <binding slot="$place1.object" value="$this.place1_object"/>
      <binding slot="$this.place1_newObject" value="$place1.newObject"/>
      <binding slot="$place2.referenceFrame" value="$this.place2_referenceFrame"/>
      <binding slot="$place2.object" value="$this.place3_object"/>
    </subtasks>
  </task>

    Agent says "Ok."

I THINK THE REST OF THIS IS MORE OF THE SAME?  ANYTHING SPECIAL I SHOULD NOTICE?

  > 
  ### Alternative recipe for PlaceSilverware
  > task Demonstration
    User says "Let's achieve Demonstration."
    Agent says "Ok."
  > task Place / PhysObj.DinnerPlate / PhysObj.Spoon 
    User says "Please execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Spoon Location: X:1 Y:0 Z:0."
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Spoon Location: X:11 Y:10 Z:10 producing Spoon Location: X:11 Y:10 Z:10.
    Agent says "Ok."
  > task Place / PhysObj.DinnerPlate / PhysObj.Fork
    User says "Please execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Fork Location: X:-1 Y:0 Z:0."
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 producing Fork Location: X:9 Y:10 Z:10.
    Agent says "Ok."
  > done Demonstration
    User says "Achieve Demonstration is done."
    Agent says "Ok."
  > eval Packages.edu.wpi.htnlfd.Init.learn($disco,"PlaceSilverware")
WARNING: redefining task model urn:disco.wpi.edu:htnlfd:setTable1
    # Returned 'null'
  > print PlaceSilverware

<task id="PlaceSilverware" xmlns="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">
    <input name="place1_referenceFrame" type="PhysObj"/>
    <input modified="place1_newObject" name="place1_object" type="PhysObj"/>
    <input modified="place2_newObject" name="place2_object" type="PhysObj"/>
    <input modified="place3_newObject" name="place3_object" type="PhysObj"/>
    <input name="input1" type="boolean"/>
    <output name="place1_newObject" type="PhysObj"/>
    <output name="place2_newObject" type="PhysObj"/>
    <output name="place3_newObject" type="PhysObj"/>
    <subtasks id="placeSilverware1">
      <step name="place1" task="std:Place"/>
      <step name="place2" task="std:Place"/>
      <step name="place3" task="std:Place"/>
      <applicable>$this.input1</applicable>
      <binding slot="$place3.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$place1.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$this.place3_newObject" value="$place3.newObject"/>
      <binding slot="$place1.object" value="$this.place1_object"/>
      <binding slot="$this.place1_newObject" value="$place1.newObject"/>
      <binding slot="$place2.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$place3.object" value="$this.place3_object"/>
      <binding slot="$this.place2_newObject" value="$place2.newObject"/>
      <binding slot="$place2.object" value="$this.place2_object"/>
    </subtasks>
    <subtasks id="placeSilverware11">
      <step name="place1" task="std:Place"/>
      <step name="place2" task="std:Place"/>
      <applicable>!$this.input1</applicable>
      <binding slot="$place1.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$place1.object" value="$this.place1_object"/>
      <binding slot="$this.place1_newObject" value="$place1.newObject"/>
      <binding slot="$place2.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$this.place2_newObject" value="$place2.newObject"/>
      <binding slot="$place2.object" value="$this.place2_object"/>
    </subtasks>
  </task>

    Agent says "Ok."
  > 
  ### Alternative Recipe for PlaceGlasses.

THIS IS THE DEMO OF *FANCY* WHEREAS THE OTHER 2ND DEMOS ABOVE ARE FOR CASUAL.

HOW DOES THE SYSTEM GET THE FLAG CORRECT?

  > task Demonstration
    User says "Let's achieve Demonstration."
    Agent says "Ok."
  > task Place / PhysObj.DinnerPlate / PhysObj.WaterGlass
    User says "Please execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and WaterGlass Location: X:-1 Y:1 Z:0."
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and WaterGlass Location: X:9 Y:11 Z:10 producing WaterGlass Location: X:9 Y:11 Z:10.
    Agent says "Ok."
  > task Place / PhysObj.DinnerPlate / PhysObj.WineGlass
    User says "Please execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and WineGlass Location: X:1 Y:1 Z:0."
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and WineGlass Location: X:11 Y:11 Z:10 producing WineGlass Location: X:11 Y:11 Z:10.
    Agent says "Ok."
  > done Demonstration
    User says "Achieve Demonstration is done."
    Agent says "Ok."
  > eval Packages.edu.wpi.htnlfd.Init.learn($disco,"PlaceGlasses")
WARNING: redefining task model urn:disco.wpi.edu:htnlfd:setTable1
    # Returned 'null'
  > print PlaceGlasses
	### Since the alternative recipe for PlaceGlasses has an extra input and output, it should be added to SetTable.
<task id="PlaceGlasses" xmlns="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">
    <input name="place1_referenceFrame" type="PhysObj"/>
    <input modified="place1_newObject" name="place1_object" type="PhysObj"/>
    <input name="input1" type="boolean"/>
    <input modified="placeGlasses11_place2_newObject" name="placeGlasses11_place2_object" type="PhysObj"/>
    <output name="place1_newObject" type="PhysObj"/>
    <output name="placeGlasses11_place2_newObject" type="PhysObj"/>
    <subtasks id="placeGlasses1">
      <step name="place1" task="std:Place"/>
      <applicable>$this.input1</applicable>
      <binding slot="$place1.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$place1.object" value="$this.place1_object"/>
      <binding slot="$this.place1_newObject" value="$place1.newObject"/>
    </subtasks>
    <subtasks id="placeGlasses11">
      <step name="place1" task="std:Place"/>
      <step name="place2" task="std:Place"/>
      <applicable>!$this.input1</applicable>

THIS IS A "BUG"!   THE POINT IS THAT THE USER IS NOT PROVIDED WITH ANY WAY TO 
*TALK* ABOUT "DIFFERENT RECIPES", SO THE SYSTEM HAS TO ASSUME THAT ALL OF THE
SECOND VERSIONS "GO TOGETHER".

MAYBE THERE NEEDS TO BE SOME "UI FUNCTION" (LIKE LEARN) THAT TAKES THE USER'S
*NAME* FOR A "RECIPE" AS AN ARGUMENT....  WE NEED TO PROVIDE THE USER (FOR THIS
KIND OF SPECIAL CASE OF ALT RECIPES CONTROLLED BY GLOBAL FLAG) WITH SOME WAY
TO *EXPRESS* WHAT IS GOING ON.  E.G., AS ALREADY IN USERTELL.TEST:

eval Packages.edu.wpi.htnlfd.Init.addAlternativeRecipe ($disco,"PlaceDishes","!this.input1")

      <binding slot="$place1.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$this.placeGlasses11_place2_newObject" value="$place2.newObject"/>
      <binding slot="$place1.object" value="$this.place1_object"/>
      <binding slot="$this.place1_newObject" value="$place1.newObject"/>
      <binding slot="$place2.referenceFrame" value="$this.place1_referenceFrame"/>
      <binding slot="$place2.object" value="$this.placeGlasses11_place2_object"/>
    </subtasks>
  </task>

    Agent says "Ok."
  > print SetTable
# WineGlass is added to the parent of PlaceGlasses.(SetTable)
# When PlaceGlasses's alternative recipe is added since all three steps of SetTable have "input1" (same name and same type)
# , it is added to SetTable.

AH..  THIS IS THE ISSUE OF "RAISING" OF NON-OBJECT INPUTS.  NOT CLEAR
WHAT THE RULES ARE HERE?  WHY IS IT NOT ENOUGH IF *ONE* OF THE STEPS
HAS THIS INPUT?   WHAT HEURISTIC ARE YOU USING TO CONCLUDE ALL THREE INPUTS *MEAN*
THE SAME THING?  JUST BECAUSE THEY ARE BOOLEAN :-(.   CLEARLY THIS IS A VERY
SPECIAL CASE FOR RECIPE CHOICE FLAG.  OK FOR NOW, AS LONG AS WE UNDERSTAND THAT.

<task id="SetTable" xmlns="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">
    <input name="placeDishes1_place1_referenceFrame" type="PhysObj"/>
    <input modified="placeDishes1_place1_newObject" name="placeDishes1_place1_object" type="PhysObj"/>
    <input name="placeDishes1_place2_referenceFrame" type="PhysObj"/>
    <input modified="placeDishes1_place2_newObject" name="placeDishes1_place2_object" type="PhysObj"/>
    <input modified="placeDishes1_place3_newObject" name="placeDishes1_place3_object" type="PhysObj"/>
    <input modified="placeSilverware1_place1_newObject" name="placeSilverware1_place1_object" type="PhysObj"/>
    <input modified="placeSilverware1_place2_newObject" name="placeSilverware1_place2_object" type="PhysObj"/>
    <input modified="placeSilverware1_place3_newObject" name="placeSilverware1_place3_object" type="PhysObj"/>
    <input modified="placeGlasses1_place1_newObject" name="placeGlasses1_place1_object" type="PhysObj"/>
    <input modified="placeGlasses1_placeGlasses11_place2_newObject" name="placeGlasses1_placeGlasses11_place2_object" type="PhysObj"/>
    <input name="input1" type="boolean"/> ###
    <output name="placeDishes1_place1_newObject" type="PhysObj"/>
    <output name="placeDishes1_place2_newObject" type="PhysObj"/>
    <output name="placeDishes1_place3_newObject" type="PhysObj"/>
    <output name="placeSilverware1_place1_newObject" type="PhysObj"/>
    <output name="placeSilverware1_place2_newObject" type="PhysObj"/>
    <output name="placeSilverware1_place3_newObject" type="PhysObj"/>
    <output name="placeGlasses1_place1_newObject" type="PhysObj"/>
    <output name="placeGlasses1_placeGlasses11_place2_newObject" type="PhysObj"/>
    <subtasks id="setTable1" ordered="false">
      <step name="placeDishes1" task="PlaceDishes"/>
      <step name="placeSilverware1" requires="placeDishes1" task="PlaceSilverware"/>
      <step name="placeGlasses1" requires="placeDishes1" task="PlaceGlasses"/>
      <binding slot="$this.placeDishes1_place3_object" value="PhysObj.SoupBowl"/>
      <binding slot="$placeSilverware1.place1_referenceFrame" value="$this.placeDishes1_place2_referenceFrame"/>
      <binding slot="$placeDishes1.place2_object" value="$this.placeDishes1_place2_object"/>
      <binding slot="$placeDishes1.input1" value="this.input1"/> ###
      <binding slot="$this.placeSilverware1_place1_newObject" value="$placeSilverware1.place1_newObject"/>
      <binding slot="$this.placeGlasses1_placeGlasses11_place2_object" value="PhysObj.WineGlass"/> ###
      <binding slot="$this.placeDishes1_place1_referenceFrame" value="PhysObj.SquareTable"/>
      <binding slot="$placeDishes1.place3_object" value="$this.placeDishes1_place3_object"/>
      <binding slot="$placeDishes1.place1_referenceFrame" value="$this.placeDishes1_place1_referenceFrame"/>
      <binding slot="$placeSilverware1.input1" value="this.input1"/> ###
      <binding slot="$this.placeDishes1_place1_newObject" value="$placeDishes1.place1_newObject"/>
      <binding slot="$this.placeDishes1_place2_referenceFrame" value="PhysObj.DinnerPlate"/>
      <binding slot="$this.placeDishes1_place2_object" value="PhysObj.SaladPlate"/>
      <binding slot="$placeGlasses1.place1_object" value="$this.placeGlasses1_place1_object"/>
      <binding slot="$this.placeSilverware1_place2_newObject" value="$placeSilverware1.place2_newObject"/>
      <binding slot="$placeSilverware1.place1_object" value="$this.placeSilverware1_place1_object"/>
      <binding slot="$placeSilverware1.place3_object" value="$this.placeSilverware1_place3_object"/>
      <binding slot="$placeGlasses1.place1_referenceFrame" value="$this.placeDishes1_place2_referenceFrame"/>
      <binding slot="$placeSilverware1.place2_object" value="$this.placeSilverware1_place2_object"/>
      <binding slot="$this.placeDishes1_place2_newObject" value="$placeDishes1.place2_newObject"/>
      <binding slot="$placeGlasses1.input1" value="this.input1"/> ###
      <binding slot="$this.placeGlasses1_place1_object" value="PhysObj.WaterGlass"/>
      <binding slot="$this.placeGlasses1_place1_newObject" value="$placeGlasses1.place1_newObject"/>
      <binding slot="$this.placeDishes1_place1_object" value="PhysObj.DinnerPlate"/>
      <binding slot="$this.placeDishes1_place3_newObject" value="$placeDishes1.place3_newObject"/>
      <binding slot="$this.placeSilverware1_place1_object" value="PhysObj.Spoon"/>
      <binding slot="$placeGlasses1.placeGlasses11_place2_object" value="$this.placeGlasses1_placeGlasses11_place2_object"/>
      <binding slot="$this.placeGlasses1_placeGlasses11_place2_newObject" value="$placeGlasses1.placeGlasses11_place2_newObject"/>
      <binding slot="$placeDishes1.place1_object" value="$this.placeDishes1_place1_object"/>
      <binding slot="$this.placeSilverware1_place2_object" value="PhysObj.Fork"/>
      <binding slot="$this.placeSilverware1_place3_newObject" value="$placeSilverware1.place3_newObject"/>
      <binding slot="$this.placeSilverware1_place3_object" value="PhysObj.Knife"/>
      <binding slot="$placeDishes1.place2_referenceFrame" value="$this.placeDishes1_place2_referenceFrame"/>
    </subtasks>
  </task>

    Agent says "Ok."
  > 
  > 
  > 
  >  task Reset
    User says "One of us should execute Reset."
    Agent execute Reset.
    Agent says "Ok."
  > 

DO A 'HISTORY' HERE AND IF THE STACK IS NOT EMPTY, DO A 'CLEAR' TO CLEAR THE DISCOURSE STACK.

  > task SetTable
    User says "Let's achieve SetTable on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:0 Y:0 Z:0 and DinnerPlate Location: X:0 Y:0 Z:0 and SaladPlate Location: X:0 Y:0 Z:1 and SoupBowl Location: X:0 Y:0 Z:2 and Spoon Location: X:1 Y:0 Z:0 and Fork Location: X:-1 Y:0 Z:0 and Knife Location: X:2 Y:0 Z:0 and WaterGlass Location: X:-1 Y:1 Z:0 and WineGlass Location: X:1 Y:1 Z:0."
    Agent says "What is the PlaceDishes input1?"
  > say
[1] True.(### Fancy)
[2] False.
[3] Let's not achieve PlaceDishes on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:0 Y:0 Z:0 and DinnerPlate Location: X:0 Y:0 Z:0 and SaladPlate Location: X:0 Y:0 Z:1 and SoupBowl Location: X:0 Y:0 Z:2.

THE REST OF THESE CHOICES ARE ODD.  I WOULD LIKE TO SEE THE HISTORY AT THIS POINT.  i THINK THIS IS DUE TO NOT HAVING DONE A CLEAR ABOVE.

[4] Let's not achieve SetTable on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:0 Y:0 Z:0 and DinnerPlate Location: X:0 Y:0 Z:0 and SaladPlate Location: X:0 Y:0 Z:1 and SoupBowl Location: X:0 Y:0 Z:2 and Spoon Location: X:1 Y:0 Z:0 and Fork Location: X:-1 Y:0 Z:0 and Knife Location: X:2 Y:0 Z:0 and WaterGlass Location: X:-1 Y:1 Z:0 and WineGlass Location: X:1 Y:1 Z:0.
[5] Let's achieve Demonstration.
[6] Let's achieve SetTable.
[7] Let's achieve SetTable.
[8] Let's achieve PlaceDishes.
[9] Let's achieve PlaceSilverware.
[10] Let's achieve SetTable.
[11] Let's achieve PlaceDishes.
[12] Let's achieve PlaceSilverware.
[13] Let's achieve PlaceGlasses.
[14] Let's achieve PlaceDishes on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:0 Y:0 Z:0 and DinnerPlate Location: X:0 Y:0 Z:0 and SaladPlate Location: X:0 Y:0 Z:1 and SoupBowl Location: X:0 Y:0 Z:2.
  >> 1
    User says "True."
	### Executing PlaceDishes
    Agent execute Place on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 producing DinnerPlate Location: X:10 Y:10 Z:10.
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 producing SaladPlate Location: X:10 Y:10 Z:11.
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SoupBowl Location: X:10 Y:10 Z:12 producing SoupBowl Location: X:10 Y:10 Z:12.
	### Although "input1" is added to SetTable, disco asks for input1 in every steps.(?)
    Agent says "What is the PlaceSilverware input1?"
  > history

[Achieve SetTable on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12 and Spoon Location: X:1 Y:0 Z:0 and Fork Location: X:-1 Y:0 Z:0 and Knife Location: X:2 Y:0 Z:0 and WaterGlass Location: X:-1 Y:1 Z:0 and WineGlass Location: X:1 Y:1 Z:0 producing DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12] -accepted -live
   User says "Let's achieve SetTable on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:0 Y:0 Z:0 and DinnerPlate Location: X:0 Y:0 Z:0 and SaladPlate Location: X:0 Y:0 Z:1 and SoupBowl Location: X:0 Y:0 Z:2 and Spoon Location: X:1 Y:0 Z:0 and Fork Location: X:-1 Y:0 Z:0 and Knife Location: X:2 Y:0 Z:0 and WaterGlass Location: X:-1 Y:1 Z:0 and WineGlass Location: X:1 Y:1 Z:0."
   [Achieve PlaceDishes on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12 and true producing DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12] -done
      [User says the PlaceDishes input1 is true] -done ### PlaceDishes is done
         Agent says "What is the PlaceDishes input1?"
         User says "True."
      Agent execute Place on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 producing DinnerPlate Location: X:10 Y:10 Z:10.
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 producing SaladPlate Location: X:10 Y:10 Z:11.
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SoupBowl Location: X:10 Y:10 Z:12 producing SoupBowl Location: X:10 Y:10 Z:12.
   [Achieve PlaceSilverware on DinnerPlate Location: X:10 Y:10 Z:10 and Spoon Location: X:1 Y:0 Z:0 and Fork Location: X:-1 Y:0 Z:0 and Knife Location: X:2 Y:0 Z:0] -live
      [User says propose the PlaceSilverware input1] -live <-focus
         [User accept] -live
            Agent says "What is the PlaceSilverware input1?"
   [Achieve PlaceGlasses on DinnerPlate Location: X:10 Y:10 Z:10 and WaterGlass Location: X:-1 Y:1 Z:0 and a boolean and WineGlass Location: X:1 Y:1 Z:0] -live

  > say
[1] True.
[2] False.
[3] Let's not achieve PlaceSilverware on DinnerPlate Location: X:10 Y:10 Z:10 and Spoon Location: X:1 Y:0 Z:0 and Fork Location: X:-1 Y:0 Z:0 and Knife Location: X:2 Y:0 Z:0.
[4] Let's achieve Demonstration.
[5] Let's achieve SetTable.
[6] Let's achieve SetTable.
[7] Let's achieve PlaceDishes.
[8] Let's achieve PlaceSilverware.
[9] Let's achieve SetTable.
[10] Let's achieve PlaceDishes.
[11] Let's achieve PlaceSilverware on DinnerPlate Location: X:10 Y:10 Z:10 and Spoon Location: X:1 Y:0 Z:0 and Fork Location: X:-1 Y:0 Z:0 and Knife Location: X:2 Y:0 Z:0.
[12] Let's achieve PlaceGlasses.
[13] Let's achieve PlaceDishes.
  >> 1
    User says "True."
	### Executing PlaceSilverware
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Spoon Location: X:11 Y:10 Z:10 producing Spoon Location: X:11 Y:10 Z:10.
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 producing Fork Location: X:9 Y:10 Z:10.
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10 producing Knife Location: X:12 Y:10 Z:10.
    Agent says "What is the PlaceGlasses input1?"
  > history

[Achieve SetTable on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12 and Spoon Location: X:11 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10 and WaterGlass Location: X:-1 Y:1 Z:0 and WineGlass Location: X:1 Y:1 Z:0 producing DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12 and Spoon Location: X:11 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10] -accepted -live
   User says "Let's achieve SetTable on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:0 Y:0 Z:0 and DinnerPlate Location: X:0 Y:0 Z:0 and SaladPlate Location: X:0 Y:0 Z:1 and SoupBowl Location: X:0 Y:0 Z:2 and Spoon Location: X:1 Y:0 Z:0 and Fork Location: X:-1 Y:0 Z:0 and Knife Location: X:2 Y:0 Z:0 and WaterGlass Location: X:-1 Y:1 Z:0 and WineGlass Location: X:1 Y:1 Z:0."
   [Achieve PlaceDishes on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12 and true producing DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12] -done
      [User says the PlaceDishes input1 is true] -done
         Agent says "What is the PlaceDishes input1?"
         User says "True."
      Agent execute Place on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 producing DinnerPlate Location: X:10 Y:10 Z:10.
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 producing SaladPlate Location: X:10 Y:10 Z:11.
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SoupBowl Location: X:10 Y:10 Z:12 producing SoupBowl Location: X:10 Y:10 Z:12.
   [Achieve PlaceSilverware on DinnerPlate Location: X:10 Y:10 Z:10 and Spoon Location: X:11 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10 and true producing Spoon Location: X:11 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10] -done
      [User says the PlaceSilverware input1 is true] -done ### PlaceSilverware is done
         Agent says "What is the PlaceSilverware input1?"
         User says "True."
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Spoon Location: X:11 Y:10 Z:10 producing Spoon Location: X:11 Y:10 Z:10.
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 producing Fork Location: X:9 Y:10 Z:10.
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10 producing Knife Location: X:12 Y:10 Z:10.
   [Achieve PlaceGlasses on DinnerPlate Location: X:10 Y:10 Z:10 and WaterGlass Location: X:-1 Y:1 Z:0 and a boolean and WineGlass Location: X:1 Y:1 Z:0] -live
      [User says propose the PlaceGlasses input1] -live <-focus
         [User accept] -live
            Agent says "What is the PlaceGlasses input1?"

  > say
[1] True.
[2] False.
[3] Let's not achieve PlaceGlasses on DinnerPlate Location: X:10 Y:10 Z:10 and WaterGlass Location: X:-1 Y:1 Z:0 and a boolean and WineGlass Location: X:1 Y:1 Z:0.
[4] Let's achieve Demonstration.
[5] Let's achieve SetTable.
[6] Let's achieve SetTable.
[7] Let's achieve PlaceDishes.
[8] Let's achieve PlaceSilverware.
[9] Let's achieve SetTable.
[10] Let's achieve PlaceDishes.
[11] Let's achieve PlaceSilverware.
[12] Let's achieve PlaceGlasses on DinnerPlate Location: X:10 Y:10 Z:10 and WaterGlass Location: X:-1 Y:1 Z:0 and a boolean and WineGlass Location: X:1 Y:1 Z:0.
[13] Let's achieve PlaceDishes.
  >> 1
    User says "True."
	### Executing PlaceGlasses
    Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and WaterGlass Location: X:9 Y:11 Z:10 producing WaterGlass Location: X:9 Y:11 Z:10.
	### SetTable is done
    Agent says "Ok."
  > 
  > history

[Achieve SetTable on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12 and Spoon Location: X:11 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10 and WaterGlass Location: X:9 Y:11 Z:10 and WineGlass Location: X:1 Y:1 Z:0 producing DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12 and Spoon Location: X:11 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10 and WaterGlass Location: X:9 Y:11 Z:10] -accepted -done
   User says "Let's achieve SetTable on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:0 Y:0 Z:0 and DinnerPlate Location: X:0 Y:0 Z:0 and SaladPlate Location: X:0 Y:0 Z:1 and SoupBowl Location: X:0 Y:0 Z:2 and Spoon Location: X:1 Y:0 Z:0 and Fork Location: X:-1 Y:0 Z:0 and Knife Location: X:2 Y:0 Z:0 and WaterGlass Location: X:-1 Y:1 Z:0 and WineGlass Location: X:1 Y:1 Z:0."
   [Achieve PlaceDishes on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12 and true producing DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 and SoupBowl Location: X:10 Y:10 Z:12] -done ### SetTable is done
      [User says the PlaceDishes input1 is true] -done
         Agent says "What is the PlaceDishes input1?"
         User says "True."
      Agent execute Place on SquareTable Location: X:10 Y:10 Z:10 and DinnerPlate Location: X:10 Y:10 Z:10 producing DinnerPlate Location: X:10 Y:10 Z:10.
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SaladPlate Location: X:10 Y:10 Z:11 producing SaladPlate Location: X:10 Y:10 Z:11.
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and SoupBowl Location: X:10 Y:10 Z:12 producing SoupBowl Location: X:10 Y:10 Z:12.
   [Achieve PlaceSilverware on DinnerPlate Location: X:10 Y:10 Z:10 and Spoon Location: X:11 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10 and true producing Spoon Location: X:11 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10] -done
      [User says the PlaceSilverware input1 is true] -done
         Agent says "What is the PlaceSilverware input1?"
         User says "True."
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Spoon Location: X:11 Y:10 Z:10 producing Spoon Location: X:11 Y:10 Z:10.
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Fork Location: X:9 Y:10 Z:10 producing Fork Location: X:9 Y:10 Z:10.
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and Knife Location: X:12 Y:10 Z:10 producing Knife Location: X:12 Y:10 Z:10.
   [Achieve PlaceGlasses on DinnerPlate Location: X:10 Y:10 Z:10 and WaterGlass Location: X:9 Y:11 Z:10 and true and WineGlass Location: X:1 Y:1 Z:0 producing WaterGlass Location: X:9 Y:11 Z:10] -done <-focus
      [User says the PlaceGlasses input1 is true] -done
         Agent says "What is the PlaceGlasses input1?"
         User says "True."
      Agent execute Place on DinnerPlate Location: X:10 Y:10 Z:10 and WaterGlass Location: X:9 Y:11 Z:10 producing WaterGlass Location: X:9 Y:11 Z:10.
      Agent says "Ok."

  > next
    Agent says "Ok."
  > quit
